

buildscript {
  repositories {
	mavenCentral()
	maven {
		name = "GradleRIO"
		url = "http://dev.imjac.in/maven"
	}
  }
  dependencies {
  	classpath group: 'jaci.openrio.gradle', name: 'GradleRIO', version: '2.0.1'			//Change this line if you wish to Update GradleRIO
  }
}

plugins {
    id "com.jfrog.bintray" version "1.4"
    id 'org.ajoberstar.grgit' version '1.3.2'
    id 'org.ajoberstar.release-opinion' version '1.3.2'
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'GradleRIO'
apply plugin: 'org.ajoberstar.release-opinion'
apply plugin: 'maven-publish'

gradlerio.robotClass = "org.usfirst.frc.team1294.robot.Robot"   //The class for the main Robot Class. Used in manifest
gradlerio.team = "1294"                                   //Your FRC team number (e.g. 5333 for team 'Can't C#', or 47 for Chief Delphi)
//gradlerio.rioIP = "10.53.33.20"                         //Uncomment to specify the IP address of the RIO

eclipse {
	project {
		natures 'org.springsource.ide.eclipse.gradle.core.nature'
	}
}

publishing {
    publications {
        MyPublication(MavenPublication) {
            from components.java
            groupId 'com.aspzone.BitBucketTest'
            artifactId 'BitBucketTest'
            version project.version.toString()
        }
    }
}

bintray {
	user = project.hasProperty('BINTRAY_USER') ? project.getProperty('BINTRAY_USER') : System.getenv('BINTRAY_USER')
	key = project.hasProperty('BINTRAY_KEY') ? project.getProperty('BINTRAY_KEY') : System.getenv('BINTRAY_KEY')
    publications = ['MyPublication']
    publish = true
    pkg {
        repo = 'FRC-1294'
        name = 'BitBucketTest'
        userOrg = 'johnrudolflewis'
        licenses = ['MIT']
        vcsUrl = 'https://github.com/JohnRudolfLewis/BitBucketTest.git'
        version {
        	name = project.version.toString()
        }
    }
}

jar { 
  manifest {
    attributes 'Main-Class': 'edu.wpi.first.wpilibj.RobotBase'
    attributes 'Robot-Class': gradlerio.robotClass
    attributes 'Version' : project.version.toString()
    attributes 'Author' : getAuthor()
  }
  from configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
}


release {
  // need to specify the repository to interact with
  grgit = org.ajoberstar.grgit.Grgit.open(project.file('.')) 
}

task wrapper(type: Wrapper) {
   gradleVersion = '2.4' //version required
}

task "create-dirs" << {
   sourceSets*.java.srcDirs*.each { it.mkdirs() }
   sourceSets*.resources.srcDirs*.each { it.mkdirs() }
}

def getAuthor() {
  def author = "unknown"
  grgit = org.ajoberstar.grgit.Grgit.open(project.file('.')) 
  if (grgit.status().isClean()) {
    def history = grgit.log(maxCommits: 1)
    author = "${history.author.name[0]} <${history.author.email[0]}>"
  } else {
    author = System.env.USER ?: System.env.USERNAME
  }
  return author
}

tasks.release.dependsOn 'build'
tasks.build.dependsOn 'wpi'